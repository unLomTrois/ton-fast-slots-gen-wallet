
const init = async () => {
    const providerUrl = 'https://testnet.toncenter.com/api/v2/jsonRPC'; // TON HTTP API url. Use this url for testnet
    const apiKey = '26b2d4189e84598f7a0e86ee5495877f0ea290b75fe536344af5b75a210996d0'; // Obtain your API key in https://t.me/tontestnetapibot
    const tonweb = new TonWeb(new TonWeb.HttpProvider(providerUrl, {apiKey})); // Initialize TON SDK

    //----------------------------------------------------------------------
    // PARTIES
    // The payment channel is established between two participants A and B.
    // Each has own secret key, which he does not reveal to the other.

    // New secret key can be generated by `tonweb.utils.newSeed()`
    const secret_key = tonweb.utils.newSeed(); // Uint8Array

    // console.log(secret_key);

    const seedA = TonWeb.utils.base64ToBytes(secret_key); // A's private (secret) key
    const keyPairA = tonweb.utils.keyPairFromSeed(seedA); // Obtain key pair (public key and private key)

    // const seedB = TonWeb.utils.base64ToBytes('at58J2v6FaSuXFGcyGtqT5elpVxcZ+I1zgu/GUfA5uY='); // B's private (secret) key
    // const keyPairB = tonweb.utils.keyPairFromSeed(seedB); // Obtain key pair (public key and private key)

    // console.log(seedA, keyPairA)
    console.log("secret:", keyPairA.secretKey)
    console.log("public:", keyPairA.publicKey)

    // if you are new to cryptography then the public key is like a login, and the private key is like a password.
    // Login can be shared with anyone, password cannot be shared with anyone.

    // With a key pair, you can create a wallet.
    // Note that this is just an object, we are not deploying anything to the blockchain yet.
    // Transfer some amount of test coins to this wallet address (from your wallet app).
    // To check you can use blockchain explorer https://testnet.tonscan.org/address/<WALLET_ADDRESS>

    const walletA = tonweb.wallet.create({
        publicKey: keyPairA.publicKey
    });
    const walletAddressA = await walletA.getAddress(); // address of this wallet in blockchain
    console.log('walletAddressA = ', walletAddressA.toString(true, true, true));

    const deploy = walletA.deploy(keyPairA.secretKey); // deploy method
    const deployFee = await deploy.estimateFee()  // get estimate fee of deploy
    console.log("fee:", deployFee)

    // const walletB = tonweb.wallet.create({
    //     publicKey: keyPairB.publicKey
    // });
    // const walletAddressB = await walletB.getAddress(); // address of this wallet in blockchain
    // console.log('walletAddressB = ', walletAddressB.toString(true, true, true));
}
